// <auto-generated />
using System;
using Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataMigrations.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230519215422_InitialCreateAndSeedData")]
    partial class InitialCreateAndSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1510ed1d-317c-4e81-900b-869ff32795b3"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8834),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Manager",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "0B151F5A-8029-4BED-B0C3-EE389BE7F820"
                        },
                        new
                        {
                            Id = new Guid("81a07a01-90d3-4100-b952-20ac0a6428a7"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8842),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Assistant Manager",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "B2B0AFA2-9253-44D6-B678-A2E554ADB696"
                        },
                        new
                        {
                            Id = new Guid("7f96c51d-2a89-42bd-8c67-86399c12c672"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8844),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Supervisor",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "E8C4BADB-3D2A-44BE-9479-254CC62660C9"
                        },
                        new
                        {
                            Id = new Guid("c2fba861-cf6a-49e0-b393-4eb01fa08fe7"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8847),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Associate",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "7DE9AD64-486E-41C2-8FA2-EB3248CCF28F"
                        },
                        new
                        {
                            Id = new Guid("678f7712-4d04-4cc0-bbcc-8d67767b165e"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8850),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Team Lead",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "ECDD09D1-298B-456F-BADF-B4358AF3A08E"
                        },
                        new
                        {
                            Id = new Guid("fc115211-a273-49a8-a955-bc9900d41acc"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8852),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Senior Associate",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "B5E64E97-7D3B-4338-ADD0-EAD00E4959C2"
                        },
                        new
                        {
                            Id = new Guid("d88a4de2-fe96-4825-8da4-d9eebd9eceb3"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8854),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Trainer",
                            TenantId = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "27074358-129C-40AA-9F02-7E1646F1D9AF"
                        },
                        new
                        {
                            Id = new Guid("54cb4c6a-017a-4fb5-9a16-6770bbdb6ce1"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8856),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Quality Assurance",
                            TenantId = new Guid("5217a17e-ffff-4fbc-aa1b-29175ab98f69"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "4D2FA6AA-4921-43BF-8578-A355B14BBD63"
                        },
                        new
                        {
                            Id = new Guid("53398a73-8b13-4ca6-803d-3c74b0dad959"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8858),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Consultant",
                            TenantId = new Guid("5217a17e-ffff-4fbc-aa1b-29175ab98f69"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "27074358-129C-40AA-9F02-7E1646F1D9AF"
                        },
                        new
                        {
                            Id = new Guid("e8d32f9e-bb43-4551-9c11-e481b98eb00f"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 19, 21, 54, 22, 408, DateTimeKind.Utc).AddTicks(8860),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Project Manager",
                            TenantId = new Guid("5217a17e-ffff-4fbc-aa1b-29175ab98f69"),
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "4D2FA6AA-4921-43BF-8578-A355B14BBD63"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0aaa2440-01fe-451c-bcd9-ca6cbc876a3a"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "NovellaTech",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("5217a17e-ffff-4fbc-aa1b-29175ab98f69"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "VeloVentures",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0B151F5A-8029-4BED-B0C3-EE389BE7F820",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a3529b9-3f1e-4166-af2b-b6b1a28ce3b4",
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            GivenName = "John",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "johndoe@example.com",
                            NormalizedName = "JOHN DOE",
                            NormalizedUserName = "johndoe",
                            PasswordHash = "AQAAAAEAACcQAAAAEBsC4mgGJ93B3Fik2Qt545zriUh5MjzIHMCWiM+P++YVLbkeF8ngQqfquoxr7LwQ+g==",
                            PhoneNumber = "555-111-1111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48d058c4-434a-4cf9-a77a-7df9a43cec6e",
                            Surname = "Doe",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "B2B0AFA2-9253-44D6-B678-A2E554ADB696",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24afe154-3274-4779-8d00-7a3fbcce069f",
                            Email = "janesmith@example.com",
                            EmailConfirmed = false,
                            GivenName = "Jane",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "janesmith@example.com",
                            NormalizedName = "JANE SMITH",
                            NormalizedUserName = "janesmith",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxHjasFkA/yyxDilELGpIogjEiIFg5Ah76HPs750TMzsWmCPVjCSARoVvj/Zez9GQ==",
                            PhoneNumber = "555-222-2222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1eb2d0bb-8556-4c7c-bb3c-0040b75264fc",
                            Surname = "Smith",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "E8C4BADB-3D2A-44BE-9479-254CC62660C9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e74399d-12a7-423c-953d-4fc094fe30ad",
                            Email = "michaelj@example.com",
                            EmailConfirmed = false,
                            GivenName = "Michael",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "michaelj@example.com",
                            NormalizedName = "MICHAEL JOHNSON",
                            NormalizedUserName = "michaelj",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8CPWw3QhYH/2QKkPVXJIqoX9pZ1GkEX8k4Nj5ACkd104K6M1QnpW/sPEvwWGdqtA==",
                            PhoneNumber = "555-333-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc9a31ff-57d0-4adc-a1f3-b7fc12b4d01b",
                            Surname = "Johnson",
                            TwoFactorEnabled = false,
                            UserName = "michaelj"
                        },
                        new
                        {
                            Id = "7DE9AD64-486E-41C2-8FA2-EB3248CCF28F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3e2a7e5-f8c5-4f12-8074-776900a95e81",
                            Email = "emilyw@example.com",
                            EmailConfirmed = false,
                            GivenName = "Emily",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "emilyw@example.com",
                            NormalizedName = "EMILY WILLIAMS",
                            NormalizedUserName = "emilyw",
                            PasswordHash = "AQAAAAEAACcQAAAAEPV/K9MDLGNfhCioH8SrUgGWtcTGchLMQchiOU8HguvWGYvfGtwcENpWVD82eV+HcA==",
                            PhoneNumber = "555-444-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eebc99a6-f25c-4450-ac18-faab29ecdd77",
                            Surname = "Williams",
                            TwoFactorEnabled = false,
                            UserName = "emilyw"
                        },
                        new
                        {
                            Id = "ECDD09D1-298B-456F-BADF-B4358AF3A08E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeb38202-c0c0-4b03-a2d9-4f5dd7878928",
                            Email = "danielb@example.com",
                            EmailConfirmed = false,
                            GivenName = "Daniel",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "danielb@example.com",
                            NormalizedName = "DANIEL BROWN",
                            NormalizedUserName = "danielb",
                            PasswordHash = "AQAAAAEAACcQAAAAEOr1bxou/A9PGvANrfgnOjjBckIHQ3Z7nVGomC4yiLhEiWyeiRsdVi9GPZ3ohsYZUg==",
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6910256b-3e89-4294-b9a7-a1f17996f6a8",
                            Surname = "Brown",
                            TwoFactorEnabled = false,
                            UserName = "danielb"
                        },
                        new
                        {
                            Id = "B5E64E97-7D3B-4338-ADD0-EAD00E4959C2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22d610f2-1350-4523-86cf-7e4ee683fd75",
                            Email = "oliviaj@example.com",
                            EmailConfirmed = false,
                            GivenName = "Olivia",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "oliviaj@example.com",
                            NormalizedName = "OLIVIA JONES",
                            NormalizedUserName = "oliviaj",
                            PasswordHash = "AQAAAAEAACcQAAAAED3SMOE6lsIP/V4YamnZ0SRYjPPsYAB0OLn5MTx3oid9ChPqWtmeS7btv5a2focsAg==",
                            PhoneNumber = "555-666-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83f873ad-4fc7-41c2-9d7d-f7d8fb95601b",
                            Surname = "Jones",
                            TwoFactorEnabled = false,
                            UserName = "oliviaj"
                        },
                        new
                        {
                            Id = "27074358-129C-40AA-9F02-7E1646F1D9AF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e727a91c-0fc9-421b-bde1-a29b3292a77a",
                            Email = "davidm@example.com",
                            EmailConfirmed = false,
                            GivenName = "David",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "davidm@example.com",
                            NormalizedName = "DAVID MILLER",
                            NormalizedUserName = "davidm",
                            PasswordHash = "AQAAAAEAACcQAAAAEBS1miyXcttDBY0rQdiKXzMwUi/NKvqXy5BXmZbjEzCFAjaOGxSgRzAZTClhsRtVzQ==",
                            PhoneNumber = "555-777-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2833df6-0da0-4563-b600-1e345276722a",
                            Surname = "Miller",
                            TwoFactorEnabled = false,
                            UserName = "davidm"
                        },
                        new
                        {
                            Id = "4D2FA6AA-4921-43BF-8578-A355B14BBD63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25ee6d5d-46cf-4412-b739-8b7fa58be039",
                            Email = "sophiad@example.com",
                            EmailConfirmed = false,
                            GivenName = "Sophia",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "sophiad@example.com",
                            NormalizedName = "SOPHIA DAVIS",
                            NormalizedUserName = "sophiad",
                            PasswordHash = "AQAAAAEAACcQAAAAEMaTTpP42plf8InQE7KyFkFFIC2zEIZ9vMARcZ5UhNzhKYUm1phNKxgzHeRakjKzOA==",
                            PhoneNumber = "555-888-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9156960-3b6d-4ab4-b79f-c105975531d5",
                            Surname = "Davis",
                            TwoFactorEnabled = false,
                            UserName = "sophiad"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bba9817f-760d-4885-8acf-793cb289bd60",
                            ConcurrencyStamp = "d9bb31d3-2e27-4528-a9fd-328676efee37",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2e5af43a-153f-40a6-b9b2-eb8a1af70e7d",
                            ConcurrencyStamp = "5dbf20e7-35c5-4e35-af7e-82d0c9c0141b",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = "4105493a-e164-472e-b7a0-ce290eb4b884",
                            ConcurrencyStamp = "5b2543de-6419-4f60-8d53-b99b7cb4aee2",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "2afaa526-aa02-4d75-a7a5-ac8a3ca202f8",
                            ConcurrencyStamp = "31303d69-b870-431d-b493-0e4f2bf02b68",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "6b180793-144d-4847-923a-f115818919c4",
                            ConcurrencyStamp = "be9ead5d-ce6d-40a7-98d5-40f21335abb3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Tenant", "Tenant")
                        .WithMany("Members")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
