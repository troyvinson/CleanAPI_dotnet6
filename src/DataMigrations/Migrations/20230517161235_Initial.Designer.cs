// <auto-generated />
using System;
using Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataMigrations.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230517161235_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e180d192-27d6-4007-87ab-9782e45ebb62"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(179),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Manager",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "BCB1F1CF-3072-49D4-BC96-72859E6F0F08"
                        },
                        new
                        {
                            Id = new Guid("7e2d12e1-74f6-49f9-b28f-070d048e1e14"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(184),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Assistant Manager",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "33BCFBF7-EDFC-4F7A-8224-9802519D299D"
                        },
                        new
                        {
                            Id = new Guid("82f7a407-1c94-406a-b60e-f172c3d1b743"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(186),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Supervisor",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "A1A68798-B47F-4653-B37D-D2C4FF37FE9D"
                        },
                        new
                        {
                            Id = new Guid("7a1a1100-c588-47d8-807f-2d242b2dea72"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(188),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Associate",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "FF971359-568F-4CCF-8F62-194AAE51C745"
                        },
                        new
                        {
                            Id = new Guid("07c752a9-2eef-4f09-a248-78aa1e90307c"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(190),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Team Lead",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "87C317FA-EED0-4E6F-A49F-29D73539D9DE"
                        },
                        new
                        {
                            Id = new Guid("c3c65b72-6fba-4a99-928c-ba3347efbd9a"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(193),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Senior Associate",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "A54FF230-6063-42BD-A37B-457D579B2544"
                        },
                        new
                        {
                            Id = new Guid("0d471414-d1b6-4415-8fbf-dbec7c61de8e"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(195),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Trainer",
                            TenantId = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "A62A61E1-419D-4C80-BA81-E6DDCCC50B1C"
                        },
                        new
                        {
                            Id = new Guid("739eb8cb-ec9f-44fb-9329-b913859e10b0"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(197),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Quality Assurance",
                            TenantId = new Guid("d55a75a9-2f99-48ea-b256-e1a44b134d4e"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "BCB1F1CF-3072-49D4-BC96-72859E6F0F08"
                        },
                        new
                        {
                            Id = new Guid("c118cf09-5fec-4adc-a915-52ed765f1ff3"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(199),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Consultant",
                            TenantId = new Guid("d55a75a9-2f99-48ea-b256-e1a44b134d4e"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "6F110D05-8EED-483B-B2FB-0D5FF1601809"
                        },
                        new
                        {
                            Id = new Guid("0724349d-d0b5-4606-bcc7-991b06605bed"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateJoined = new DateTime(2023, 5, 17, 16, 12, 35, 715, DateTimeKind.Utc).AddTicks(201),
                            IsDeleted = false,
                            IsEnabled = true,
                            Position = "Project Manager",
                            TenantId = new Guid("d55a75a9-2f99-48ea-b256-e1a44b134d4e"),
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "B3B8EFA5-632C-4027-9D16-9703EE09BC92"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d46eae42-fe4b-4706-be3d-965b10e3861a"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "NovellaTech",
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d55a75a9-2f99-48ea-b256-e1a44b134d4e"),
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "VeloVentures",
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "BCB1F1CF-3072-49D4-BC96-72859E6F0F08",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bea0e015-c78a-42d2-8054-58683b59e3e1",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "555-111-1111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a312e53f-1a7e-4b9f-824e-2a8dba673fae",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "33BCFBF7-EDFC-4F7A-8224-9802519D299D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d86f600c-ac2a-4829-8ec6-2c8dcd09ebcd",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "janesmith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "555-222-2222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8bcb5c5-4e7b-409a-8cec-3486ed1e2cc5",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "A1A68798-B47F-4653-B37D-D2C4FF37FE9D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f21bcac-2c94-4750-b89a-64a1c683f107",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "michaelj@example.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumber = "555-333-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1eff772-063a-4906-a23f-7879a450babb",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "michaelj"
                        },
                        new
                        {
                            Id = "FF971359-568F-4CCF-8F62-194AAE51C745",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "360d51b2-abec-4dd6-8ae6-9ce829e1af45",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emilyw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Williams",
                            LockoutEnabled = false,
                            PhoneNumber = "555-444-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98251192-7661-42e6-bdc4-41acaa8f31d6",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emilyw"
                        },
                        new
                        {
                            Id = "87C317FA-EED0-4E6F-A49F-29D73539D9DE",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fdea714-38a4-4e5a-86eb-0f15f7d2f3f2",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "danielb@example.com",
                            EmailConfirmed = false,
                            FirstName = "Daniel",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a36252e3-7367-43cf-9fc5-80cac446d8f9",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "danielb"
                        },
                        new
                        {
                            Id = "A54FF230-6063-42BD-A37B-457D579B2544",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "797cb012-e3d4-42a4-b37e-00a98e810ecc",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "oliviaj@example.com",
                            EmailConfirmed = false,
                            FirstName = "Olivia",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Jones",
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e74ae829-e00d-45cd-b3e2-936ef2a5051e",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "oliviaj"
                        },
                        new
                        {
                            Id = "A62A61E1-419D-4C80-BA81-E6DDCCC50B1C",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd43d016-e7d1-4d33-a000-0f96abe2d2e8",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "davidm@example.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Miller",
                            LockoutEnabled = false,
                            PhoneNumber = "555-777-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0935cfbe-72f4-4672-b273-dbc6dc498328",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "davidm"
                        },
                        new
                        {
                            Id = "6F110D05-8EED-483B-B2FB-0D5FF1601809",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75a70ec5-8773-4bcc-a41f-88fe99be630b",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sophiad@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            PhoneNumber = "555-888-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3793d778-76c2-4f16-9a3f-d29183a54e23",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "sophiad"
                        },
                        new
                        {
                            Id = "B3B8EFA5-632C-4027-9D16-9703EE09BC92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13db3705-121a-47a2-96ba-57b8dcea9b91",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "jamesw@example.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            PhoneNumber = "555-999-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00d3eede-2ef8-4b03-bd42-02fef45446e4",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "jamesw"
                        },
                        new
                        {
                            Id = "28279BE8-C3F4-451A-82FE-C11828C6AA1D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9727d859-3546-4379-a9bc-96257f34c985",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emmat@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emma",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            PhoneNumber = "555-000-0000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d955ca8-e156-43ad-a774-218823f1ae8a",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emmat"
                        },
                        new
                        {
                            Id = "557D1752-0B6A-4FFA-B939-29A57EAA0E91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca980d56-8ac8-4e84-8202-20d952d861e3",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "benjamina@example.com",
                            EmailConfirmed = false,
                            FirstName = "Benjamin",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            PhoneNumber = "555-111-1111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a184c27-371d-4423-b019-ef5a4e2a76f9",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "benjamina"
                        },
                        new
                        {
                            Id = "BDDFCAEC-E23E-4D61-8A02-0A1F75D40240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7520eed-b308-429d-b794-d54fc07f1c8c",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "avam@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ava",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            PhoneNumber = "555-222-2222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97c80158-3a6a-4c33-96d9-281944a0f738",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "avam"
                        },
                        new
                        {
                            Id = "8D5F0776-AC3C-4C33-9EF1-FA9DC2933972",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80587072-ed57-4918-ac9d-bcf7e0eaf670",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "williamt@example.com",
                            EmailConfirmed = false,
                            FirstName = "William",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            PhoneNumber = "555-333-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a922db9-1a29-4ee2-a555-23f472690df0",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "williamt"
                        },
                        new
                        {
                            Id = "F476A298-9040-4F68-86A2-FB6F94258190",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2d82b41-0040-4b5a-8bee-dcb0b7894c57",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "miaw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mia",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "White",
                            LockoutEnabled = false,
                            PhoneNumber = "555-444-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3954e5e-c1e3-4dae-9375-6d1ad56a46ce",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "miaw"
                        },
                        new
                        {
                            Id = "3DFA5AEA-7D68-4BB2-B221-DA563E0ED646",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bfa62d5-485f-4ed5-88cd-ef24d86022e7",
                            CreatedBy = "",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alexanderl@example.com",
                            EmailConfirmed = false,
                            FirstName = "Alexander",
                            IsDeleted = false,
                            IsEnabled = false,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56ed4ae5-c541-4148-879c-0a8937d9ec22",
                            TwoFactorEnabled = false,
                            UpdatedBy = "",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "alexanderl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e866125e-6ca1-4c8b-8eec-1e2bdcc468e7",
                            ConcurrencyStamp = "2564baa9-48d2-4413-9ae2-d05084b2d0fa",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "75642c64-c595-4c4c-b739-28580eeb7c4c",
                            ConcurrencyStamp = "6db67556-b1b6-4fac-881c-89601717541a",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = "cd58fc44-ed64-46bd-a976-3147347f165e",
                            ConcurrencyStamp = "9ece3eb9-e492-4b67-8493-ee2be8290851",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "20e1ece5-ead7-420d-bd95-872af0392da8",
                            ConcurrencyStamp = "85107b35-a485-4d58-8288-ca95fcdcab3e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "83aab88e-b3e1-4476-9fe8-457f9f4c277d",
                            ConcurrencyStamp = "1ed325c4-f9ec-4270-a865-79191a05f16c",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Tenant", "Tenant")
                        .WithMany("Members")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
